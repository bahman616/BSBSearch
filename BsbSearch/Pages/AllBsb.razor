@page "/allbsb"
@page "/allbsb/{PageNumber:int}"

<PageTitle>All BSB Numbers</PageTitle>

@using BsbSearch.Data
@using BsbSearch.Models
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Linq
@inject IHttpClientFactory ClientFactory

<h1>All BSB Numbers</h1>

@if (PagedBsbRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>BSB</th>
                <th>FI Code</th>
                <th>Financial Institution Name</th>
                <th>BSB Address</th>
                <th>Suburb/Town/City</th>
                <th>State</th>
                <th>Postcode</th>
                <th>Payment Systems</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bsbRecord in PagedBsbRecords)
            {
                <tr>
                    <td>@bsbRecord.Number</td>
                    <td>@bsbRecord.FICode</td>
                    <td>@bsbRecord.Name</td>
                    <td>@bsbRecord.Address</td>
                    <td>@bsbRecord.Suburb</td>
                    <td>@bsbRecord.State</td>
                    <td>@bsbRecord.PostCode</td>
                    <td>@bsbRecord.PaymentSystems</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
    @for (int i = FirstPage; i <= LastPage; i++)
    {
        <span><a href="allbsb/@i"> @i </a>|</span>         
    }
    </div>
}

@code {
    private List<BsbRecord>? PagedBsbRecords;
    private List<BsbRecord>? AllBsbRecords;

    [Parameter]
    public int PageNumber { get; set; } = 1;

    public int PageCount { get; set; } = 0;
    public int FirstPage { get; set; } = 1;
    public int LastPage { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        var clientlocal = ClientFactory.CreateClient("LocalBackendApi");
        var response = await clientlocal.GetAsync("api/bsb");
        var content = await response.Content.ReadAsStringAsync();

        var options = new JsonSerializerOptions 
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        };
        AllBsbRecords = JsonSerializer.Deserialize<List<BsbRecord>>(content, options);

        if (AllBsbRecords != null)
        {
            PageCount = AllBsbRecords.Count()/10;
            PagedBsbRecords = AllBsbRecords.Take(10).ToList();
        }
    }

    // Add paging because the page can be very large
    protected override void OnParametersSet()
    {
        if (PageNumber == 0)
        {
            PageNumber = 1;
        }

        PagedBsbRecords = AllBsbRecords?.Skip(PageNumber*10).Take(10).ToList();

        FirstPage = (PageNumber - 5) <= 0 ? 1: (PageNumber - 5);
        LastPage =  (PageNumber + 5) >= PageCount ? PageCount : (PageNumber + 5);
    }
}
