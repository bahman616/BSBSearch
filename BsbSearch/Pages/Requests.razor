@page "/requests"
@page "/requests/{PageNumber:int}"

<PageTitle>Requests History</PageTitle>

@using BsbSearch.Models
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Linq
@inject IHttpClientFactory ClientFactory

<h1>Requests History</h1>

@if (PagedRecords == null)
{
    <p><em> @LoadingText</em></p>
}
else
{
    <table class="table requests-table">
        <thead>
            <tr>
                <th>Team Name</th>
                <th>Url</th>
                <th>Date Time (UTC)</th>
                <th>Status</th>
                <th>Status Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in PagedRecords)
            {
                <tr class="@GetStyleForStatus(record.Status)">
                    <td>@record.TeamName</td>
                    <td>@record.Url</td>
                    <td>@record.DateTimeInUTC</td>
                    <td>@record.Status</td>
                    <td>@record.StatusMessage</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
    @for (int i = FirstPage; i <= LastPage; i++)
    {
        <span><a href="requests/@i"> @i </a>|</span>         
    }
    </div>
}

@code {
    private List<RequestHistory>? PagedRecords;
    private List<RequestHistory>? AllRecords;

    private string LoadingText = "Loading...";

    [Parameter]
    public int PageNumber { get; set; } = 1;

    public int PageCount { get; set; } = 0;
    public int FirstPage { get; set; } = 1;
    public int LastPage { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        var clientlocal = ClientFactory.CreateClient("LocalBackendApi");
        // These credentials can be moved to app settings
        clientlocal.DefaultRequestHeaders.Add("team-name","local");
        clientlocal.DefaultRequestHeaders.Add("very-very-secure", "vvvcx#$cddfdf");
        var response = await clientlocal.GetAsync("api/requestHistory");

        var content = await response.Content.ReadAsStringAsync();

        var options = new JsonSerializerOptions 
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        };
        if (string.IsNullOrEmpty(content))
        {
            LoadingText = "Not Found!";
            return;
        }

        AllRecords = JsonSerializer.Deserialize<List<RequestHistory>>(content, options);

        if (AllRecords != null)
        {
            PageCount = (AllRecords.Count()/10) + 1;
            PagedRecords = AllRecords.Take(10).ToList();
        }
    }

    // Add paging because the page can be very large
    protected override void OnParametersSet()
    {

        if (PageNumber > 0)
        {
            PageNumber -= 1;
        }
        
        PagedRecords = AllRecords?.Skip(PageNumber*10).Take(10).ToList();

        FirstPage = (PageNumber - 5) <= 0 ? 1: (PageNumber - 5);
        LastPage =  (PageNumber + 5) >= PageCount ? PageCount : (PageNumber + 5);
    }

    private string GetStyleForStatus(RequestStatus status)
    {
        return status == RequestStatus.Fail ? "failed-row" : "succeeded-row";
    }
}
