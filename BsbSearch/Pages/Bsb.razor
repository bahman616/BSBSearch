@page "/bsb"

<PageTitle>Search for a BSB</PageTitle>

@using BsbSearch.Infrastructure
@using BsbSearch.Models
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Linq
@using System.Text
@using BsbSearch.ViewModels
@using Microsoft.Extensions.Options
@inject IHttpClientFactory ClientFactory
@inject IOptions<Configuration> optionsConfiguration

<h1>Search for a BSB</h1>

@if (FailedToLoad)
{
    <div class="bsb-failure col-md-5 col-sm-12">Failed to search for the BSB number. 
        Please make sure it is a valid BSB number and try again.</div>
}
@if(IsLoading) 
{
    <p><em>Loading...</em></p>
}
else 
{
    <div class="form-row">
        <div class="form-group col-md-3 col-sm-12">
            <label>BSB Number</label>
            <input @bind="bsb" class="form-control" placeholder="Enter BSB"/>
        </div>
    </div>
    <button @onclick="Search" class="btn btn-primary">Search</button>

    @if (Edited)
    {
        <div class="bsb-edited col-md-5 col-sm-12">The Selected BSB Record is updated. All other teams were notified using their web hooks. 
            They should request for details shortly.
            You can check "All Requests" page to check the status</div>
    }
    @if (!IsEditMode && bsbRecord != null)
    {
        <div class="panel panel-default">
            <h3 >Here are the details for @bsbRecord.Number:</h3>
            <div class="panel-body">
                <div>BSB: @bsbRecord.Number</div>
                <div>FICode: @bsbRecord.FICode</div>
                <div>Financial Institution Name: @bsbRecord.Name</div>
                <div>BSB Address: @bsbRecord.Address</div>
                <div>Suburb/Town/City: @bsbRecord.Suburb</div>
                <div>State: @bsbRecord.State</div>
                <div>Postcode: @bsbRecord.PostCode</div>
                <div>Payment Systems: @bsbRecord.PaymentSystems</div>
            </div>
        </div>
        <div>
            <button class="btn btn-secondary" @onclick="Edit">Edit</button>
        </div>
    }
    else if (bsbRecord != null)
    {
        <EditForm Model="@bsbRecord" OnValidSubmit="@HandleValidSubmit">

            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="number">BSB Number:</label>
                    <InputText id="number" @bind-Value="bsbRecord.Number" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="FICode">FICode:</label>
                    <InputText id="FICode" @bind-Value="bsbRecord.FICode" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="Name">Financial Institution Name:</label>
                    <InputText id="Name" @bind-Value="bsbRecord.Name" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="Address">BSB Address:</label>
                    <InputText id="Address" @bind-Value="bsbRecord.Address" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="Suburb">Suburb/Town/City:</label>
                    <InputText id="Suburb" @bind-Value="bsbRecord.Suburb" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="State">State:</label>
                    <InputText id="State" @bind-Value="bsbRecord.State" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="PostCode">PostCode:</label>
                    <InputText id="PostCode" @bind-Value="bsbRecord.PostCode" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-5 col-sm-12">
                    <label for="PaymentSystems">PaymentSystems:</label>
                    <InputText id="PaymentSystems" @bind-Value="bsbRecord.PaymentSystems" />
                </div>
            </div>

            <button class="btn btn-primary" type="submit">Submit</button>
            <button class="btn btn-secondary" type="button" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    }

}

@code {
    private BsbRecordViewModel? bsbRecord;

    private bool IsEditMode = false;
    private bool IsLoading = false;
    private bool Edited = false;
    private bool FailedToLoad = false;

    public string bsb { get; set; } = "";

    protected async Task Search()
    {
        IsLoading = true;
        FailedToLoad = false;

        var clientlocal = ClientFactory.CreateClient("LocalBackendApi");
        clientlocal.DefaultRequestHeaders.Add(Configuration.TeamNameHeader, optionsConfiguration.Value.LocalTeamName);
        clientlocal.DefaultRequestHeaders.Add(Configuration.TeamKeyHeader, optionsConfiguration.Value.LocalTeamKey);

        try
        {
            var response = await clientlocal.GetAsync($"api/bsb/{bsb}");
            var content = await response.Content.ReadAsStringAsync();

            var options = new JsonSerializerOptions 
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            };
            var originalBsbRecord = JsonSerializer.Deserialize<BsbRecord?>(content, options);
            // This mapping is because we need to work on a mutable version of this object
            // Because we want to allow users to edit
            bsbRecord = Mappers.BsbRecordMapper.Map(originalBsbRecord);
        }
        catch
        {
            FailedToLoad = true;
        }

        IsLoading = false;

    }

    private async Task HandleValidSubmit()
    {
        IsLoading = true;

        var clientlocal = ClientFactory.CreateClient("LocalBackendApi");
        clientlocal.DefaultRequestHeaders.Add(Configuration.TeamNameHeader, optionsConfiguration.Value.LocalTeamName);
        clientlocal.DefaultRequestHeaders.Add(Configuration.TeamKeyHeader, optionsConfiguration.Value.LocalTeamKey);
        var stringPayload = JsonSerializer.Serialize(bsbRecord);
        var httpContent = new StringContent(stringPayload, Encoding.UTF8, "application/json");

        var result = await clientlocal.PutAsync($"api/bsb/{bsbRecord?.Id}", httpContent);
        result.EnsureSuccessStatusCode();

        IsEditMode = !result.IsSuccessStatusCode;
        Edited = result.IsSuccessStatusCode;
        IsLoading = false;
    }

    private void Edit()
    {
        IsEditMode = true;
        Edited = false;
    }

    private void CancelEdit()
    {
        IsEditMode = false;
    }


}
